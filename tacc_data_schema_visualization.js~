
     function getMapHeight() {
	 return (window.innerHeight*0.8);
     }

     function getMapWidth() {
	 return (window.innerWidth*0.9);
     }

     results_json= JSON.parse(@Html("`"+results+"`"));



//Node descriptions and urls for specific nodes (to be shown when right clicked)
special_node_descriptions_and_urls = {
	 "DISCOS":{"description":
                   "DISCOS (Database and Information System Characterising Objects in Space) serves as a single-source reference for launch information, object registration details, launch vehicle descriptions, as well as spacecraft information", "url":"https://discosweb.esoc.esa.int/"},
                                      "UN Registry":{"description":"UNO Space Objects Registry", "url":"https://www.unoosa.org/"},
                                      "GeoDisposalCompliance":{"description":"Querying space objects for geo-disposal compliance", "url":"http://astriaservices.tacc.utexas.edu/compliance"},
                                      "UnRegistryCompliance":{"description":"Querying space objects for UNO Registration compliance", "url":"http://astriaservices.tacc.utexas.edu/compliance"},
                                      "Visualization":{"description":"Visualization of Space Objects", "url":"http://astria.tacc.utexas.edu/AstriaGraph"},
                                      };
//hide right click menu
$(".right_click_menu").toggle();

     // create a network
     var container = document.getElementById("schema_diagram");

     var options = {
	  height: getMapHeight()+"px", 
	  width: getMapWidth()+"px",
	  physics: {enabled:true, 
		       barnesHut: {
			          theta: 0.5,
			          gravitationalConstant: -5000,
			          centralGravity: 2,
			          springLength: 300,
			          springConstant: 0.01,
			          damping: 0.09,
			          avoidOverlap: 1
			      }, 
		       solver: 'barnesHut',
		       stabilization: {enabled: true,
				          iterations: 1000,
				          updateInterval: 100,
				          onlyDynamicEdges: false,
				          fit: true
			      },
		       wind:{x:7},
		     }, 
	  layout: {
	           //randomSeed: "0.9146962939741898:1623901278234",
	           //randomSeed: "0.8145072911746452:1623906161863",
	           //randomSeed: undefined,
	           randomSeed: "0.399907209554766:1623964197743",
	           //randomSeed:"0.399907209554766:1623964197743",
	           //randomSeed:"0.23331816166174812:1623962720173",
	           //randomSeed: "0.23331816166174812:1623962720173",
	           //randomSeed: "0.23331816166174812:1623962720173",
	           //randomSeed:"0.8188670540149801:1623962768442",
	           //randomSeed:"0.1490662722669338:1623960741232",
	           //randomSeed:"0.1986671577118675:1623962218684",
	           improvedLayout:true,
	           clusterThreshold: 150,
	           hierarchical: {
		        enabled:false,
		        levelSeparation: 80,
		        nodeSpacing: 500,
		        treeSpacing: 500,
		        blockShifting: true,
		        edgeMinimization: true,
		        parentCentralization: true,
		        direction: 'LR',        // UD, DU, LR, RL
		        sortMethod: 'hubsize',  // hubsize, directed
		        shakeTowards: 'roots'  // roots, leaves
		            }
	       }, 
	  edges: {
	           smooth: {
		        enabled: false,
		        type: "dynamic",
		        roundness: 0.5
		            }
	       },
   nodes: {
	 borderWidth:1,
   },
	  groups: {
	           Field:{color:"#add8e6", oldcolor:"#add8e6", font:{size:35}},
	           Problem:{color:"#ffcccb", oldcolor:"#ffcccb", font:{size:35}},
	           Class:{color:"#90ee90", oldcolor:"#90ee90", font:{size:35}},
	           Collection:{color:"#ffff00", oldcolor:"#ffff00", font:{size:35}}
	       }
     };


     var mynetwork = document.getElementById("schema_diagram");

     var nodes = new vis.DataSet(results_json.nodes);
     var edges = new vis.DataSet(results_json.edges);

     allNodes = nodes.get({returnType:"Object"});
     allEdges = edges.get({returnType:"Object"});

     var currently_selected_edges = [];
     var currently_selected_nodes = [];

     function set_default_edge(edge_list) {
	  for(var edgeId of edge_list){
	           //console.log(edgeId, allEdges[edgeId]);
	           edge = allEdges[edgeId];
	           edge["color"]={"color":"black","inherit":false};
       edge["width"]=1;
	           edges.update(edge);
	       }
     }
     //console.log(allEdges);
     var list_of_all_edges = Object.keys(allEdges).map(function(key){return key;});
     set_default_edge(list_of_all_edges);


     //Set fixed coordinates for Collection and Problem Nodes
     function set_coordinates_for_collection_nodes() {
	  
	  var step_size = 2*getMapHeight()/7;
	  var loop_count=0;
	  for(var n in allNodes){
	           x = -5*getMapWidth();
	           
	           if(allNodes[n]["group"]=="Collection") {
		        loop_count+=1;
		        allNodes[n].x = x;
		        allNodes[n].y = loop_count*step_size;
		        allNodes[n]["fixed"] = {x:true, y:true};
		        allNodes[n]["physics"] = false;
		        //console.log(allNodes[n]);
		            }
	           
	       }
     } 
     
          function set_coordinates_for_problem_nodes() {
	       //Set x,y position for Problem nodes
	       step_size = getMapHeight()/4;
	       loop_count=0;
	       sign=-1;
	       for(var n in allNodes){
		        
		        y_offset=getMapHeight();
		        
		        if(allNodes[n]["group"]=="Problem") {
			     loop_count+=1;
			     allNodes[n].y = sign*loop_count*step_size+y_offset;
			     allNodes[n].x = -3*getMapWidth();
			     //allNodes[n].x = x;
			     allNodes[n]["fixed"] = {x:true, y:true};
			     allNodes[n]["physics"] = false;
			     //console.log(allNodes[n]);
			     sign*=-1;
			         }
		        
		    }
   }
   

     set_coordinates_for_collection_nodes();
     set_coordinates_for_problem_nodes();

     //console.log(allNodes);
     //console.log(nodes.get({returnType:"Object"}));

     var data = {
	  nodes: nodes,
	  edges: edges,
     };

     var network = new vis.Network(container, data, options);

     //stop simulation after stabalization of network
     network.on("stabilizationIterationsDone", function () {
	  network.setOptions( { physics: false } );
     });
     
     //console.log(network.getSeed());


     //sets up coordinate system to match canvas
     network.moveTo({
	  position: {x: -getMapWidth()/2, y: -getMapHeight()/2},
	  //offset: {x: -getMapWidth()/2, y: -getMapHeight()/2},
	  scale: 1,
     });

     //add pop up menus for certain nodes containing urls for example website
     function add_url_popup(url, description) {
         const a = document.createElement("a");
         a.innerHTML = description;
         a.href=url;
         return a;
     }
     
          function add_hover_popups_for_nodes() {
         for(var [i, node] of Object.entries(allNodes)) {
             if(node.label == "Visualization") {
                 url = "http://astria.tacc.utexas.edu/AstriaGraph/";
                 description = "AstriaGraph: Space objects visualization";
                 node.title = add_url_popup(url, description);
                 node.x = network.getPosition(node.id).x;
                 node.y = network.getPosition(node.id).y;
                 nodes.update(node);
             }
             else if((node.label == "GeoDisposalCompliance") || (node.label == "UnRegistryCompliance")) {
                 url = "http://astriaservices.tacc.utexas.edu/compliance";
                 description = "Example Compliance Queries";
                 node.title = add_url_popup(url, description);
                 node.x = network.getPosition(node.id).x;
                 node.y = network.getPosition(node.id).y;
                 nodes.update(node);
             }
         }

     }

     add_hover_popups_for_nodes();

     
     
     
     
//initial edge highlight color
//var colors= ["red", "blue", "green", "purple", "yellow", "orange"];
var highlight_color = "red";

function change_highlight_color() {
             //change edge highlight color for next selection
             //random_color=Math.floor(Math.random()*123456789).toString(16);
             //highlight_color = "#"+random_color;
             
             highlight_color ="hsl("+ 360 * Math.random() + ',' +
			      ( 95 * Math.random()) + '%,' + 
			      ( 45+10 * Math.random()) + "%)";
             //console.log(highlight_color);
             //var color_index = Math.floor(colors.length*(Math.random()+Math.random())/2);
             //highlight_color = colors[color_index];
}


     function highlight_nodes(node_ids) {
	  for(var nodeId of node_ids) {
	           //console.log(allNodes[nodeId]);
	           allNodes[nodeId].x = network.getPosition(nodeId).x;
	           allNodes[nodeId].y = network.getPosition(nodeId).y;
	           //allNodes[nodeId].color={"border": "red", "highlight":{"border":"red"}};
       var group = allNodes[nodeId].group;
       var color = {"background":options.groups[group].color, "border": highlight_color, "highlight":{"border":highlight_color, "background":options.groups[group].color}};
       //console.log(nodeId, allNodes[nodeId].label,color);
       //allNodes[nodeId].color={"border": highlight_color, "highlight":{"border":highlight_color}};
       allNodes[nodeId].color=color;
       allNodes[nodeId].borderWidth=4;
       allNodes[nodeId].borderWidthSelected=4;
	           nodes.update(allNodes[nodeId]);
	           //console.log(allNodes[nodeId].oldcolor, allNodes[nodeId].color);
	           //console.log(nodeId);
	           //node = allNodes[nodeId];
	           //node.color="red";
	           //allNodes.update(node);
	       }
	  
     }

     function highlight_edges(edges_list) {

	  for(var edgeId of edges_list) {
	           edge = allEdges[edgeId];
             edge.color=highlight_color;
             edge.width=4;
             edges.update(edge);
	       }
     }
     
    function gray_out_everything_else() {
	 //nodes
      for(var [i, node] of Object.entries(allNodes)) {
	  //console.log(currently_selected_nodes.includes(node))
          if(!currently_selected_nodes.includes(node.id)) {
              node.color = "rgba(200,200,200,0.4)";
            if(node.group=="Problem" || node.group=="Collection"){
		node.x = network.getPosition(node.id).x;
		node.y = network.getPosition(node.id).y;
		}
            nodes.update(node);
          }      
      }
     for(var [i, edge] of Object.entries(allEdges)) {
	 if(!currently_selected_edges.includes(edge.id)) {
             edge.color= "rgba(200,200,200,0.4)";
          edges.update(edge);
        }
     }
    }

//adds list2 to list1, removes duplicates and returns list without duplicates
     function concat_to_list_without_duplicates(list1, list2) {
	 var l = list1.concat(list2);
          var result_list = [];
         l.forEach(i => {
          if(result_list.indexOf(i)==-1) {
              result_list.push(i);
          }
          });
	 return result_list;
}


     function node_select_handler(selected_nodes) {
    //hide right click menu if open
    $(".right_click_menu").hide();
	  if(selected_nodes.nodes.length==0) {
	           //network.redraw();
	           //console.log(allNodes);
	           //get all nodes to default color and position
	           for(var [i, node] of Object.entries(allNodes)) {
		       node.color=node.oldcolor;
		        if(node.group=="Problem" || node.group=="Collection"){
			    node.x = network.getPosition(node.id).x;
			    node.y = network.getPosition(node.id).y;
			    }
       node.borderWidth=1;
       node.borderWidthSelected=1;
		        nodes.update(node);
		        //console.log(node);
		            }
	           //get all edges to default color
	           //set_default_edge(currently_selected_edges);
	           set_default_edge(list_of_all_edges);
       currently_selected_edges = [];
       currently_selected_nodes = [];

	       }
	  else {
	           //console.log(selected_nodes.nodes);
	           //console.log(selected_nodes.edges);
	           for(var nodeId of selected_nodes.nodes) {
		        //var node = allNodes[nodeId];
     //console.log(node);
     //console.log(currently_selected_nodes);
		        var neighbour_nodes = network.getConnectedNodes(nodeId);
     //console.log(neighbour_nodes);
		        //var neighbour_edges = network.getConnectedEdges(nodeId);
		        var neighbour_edges = selected_nodes.edges;
     /*
		        currently_selected_edges = currently_selected_edges.concat(neighbour_edges);
     currently_selected_nodes = currently_selected_nodes.concat(nodeId);
     currently_selected_nodes = currently_selected_nodes.concat(neighbour_nodes);
     */
     currently_selected_edges = concat_to_list_without_duplicates(currently_selected_edges, neighbour_edges);
     currently_selected_nodes = concat_to_list_without_duplicates(currently_selected_nodes, neighbour_nodes.concat(nodeId));
     /*
     for(var neighbour_node_id of neighbour_nodes) {
	 currently_selected_nodes = currently_selected_nodes.concat(neighbour_node_id);
     }
     */
     //console.log(currently_selected_nodes);
		        var all_nodes_to_highlight = neighbour_nodes
     all_nodes_to_highlight = all_nodes_to_highlight.concat(nodeId);
     //console.log(nodeId);
     //console.log(typeof(all_nodes_to_highlight), all_nodes_to_highlight);
		        //console.log(neighbour_edges.length);
		        //console.log(currently_selected_edges);
		        //all_nodes_to_highlight.push(nodeId);
		            }
	           //console.log(all_nodes_to_highlight);
       //console.log(currently_selected_nodes);
	           highlight_nodes(all_nodes_to_highlight);
       gray_out_everything_else();
	           highlight_edges(neighbour_edges);
       
	           //change highlight color
       change_highlight_color();
	       }
	  
     }


function node_right_click_handler(obj) {
	 obj.event.preventDefault();
          
          nodeid = network.getNodeAt({x:obj.pointer.DOM.x, y:obj.pointer.DOM.y});
          //var menu = document.querySelector(".right_click_menu"); 
          if(nodeid===undefined) {
              $(".right_click_menu").hide();
              return;
          }
          node = allNodes[nodeid]
          //console.log(node);
          //menu.style.display==="inline";
          //check if there is a description for this node
          for(var node_label in special_node_descriptions_and_urls) {
              if(node_label === node.label) {
		  $(".right_click_menu").toggle();
                $("[id='heading']").html(node.label);
                $("[id='description']").html(special_node_descriptions_and_urls[node_label]["description"]);
                $("[id='url']").html(special_node_descriptions_and_urls[node_label]["url"]);
                $("[id='url']").attr("href", special_node_descriptions_and_urls[node_label]["url"]);
                $("[id='url']").attr("target", "_blank");
		  
                //console.log(obj.event.pageX)
                //document.querySelector(".heading").innerHTML = node.label;
                //document.querySelector(".description").innerHTML = special_node_descriptions_and_urls[datasource]["description"];
                //document.querySelector(".url").innerHTML = special_node_descriptions_and_urls[datasource]["url"];
		  //document.querySelector(".url").href = special_node_descriptions_and_urls[datasource]["url"];            
                $(".right_click_menu").css({
		    top: obj.event.pageY + "px",
		    left: obj.event.pageX + "px",
                  width:"20%",
                  //display: "none",
		    "z-index": "1000",
		    position: "absolute",
		    overflow: "hidden",
                  "overflow-wrap":"break-word",
		    border: "1px solid #CCC",
		    "white-space": "wrap",
		    "font-family": "sans-serif",
		    //background: "#FFFF",
                  background: options.groups[node.group].color,
		    //color: node.color.background,//"#333",
		    "border-radius": "5px",
		    }
		     );
               //console.log($(".right_click_menu").css);
               
                //console.log(heading);
		  //menu.querySelector("heading").innerHTML = node.label;
                //menu.querySelector("description").innerHTML = special_node_descriptions_and_urls[datasource]["description"];
		  //menu.querySelector("url").innerHTML = special_node_descriptions_and_urls[datasource]["url"];
              }
          }
          
          
          //console.log(node);
}

     network.on("click", node_select_handler);
     network.on("oncontext", node_right_click_handler);
